swagger: '2.0'
basePath: /v1
info:
  version: 0.0.1
  title: Notare Note Taking and Organisation System
  description: This service is used for storing notes taken against videos on youtube.
host: 127.0.0.1:5000
schemes:
  - http
  - https
consumes: 
  - application/json
produces: 
  - application/json
  
  
definitions:
  error:
    type: object
    properties:
      errorMessage:
        type: string
        example: "error message"
        
  tag:
    type: object
    properties:
      tag: 
        type: string
        example: "comedy"
      user_id:
        type: integer
        example: 1
      
  note:
    type: object
    properties:
      note_id:
        type: integer
        example: 1
      note:
        type: string
        example: "this is my note"
      user_id:
        type: integer
        example: 1
      video_id:
        type: string
        example: "gSdG3FsMBq4"
      timestamp:
        type: number
        example: 2.5
        
  video:
    type: object
    properties:
      video_id:
        type: string
        example: "gSdG3FsMBq4"
      user_id:
        type: integer
        example: 1
      video_title:
        type: string
        example: "physics 101"
      categories:
        type: string
        example: "comedy"
      notes_ids:
        type: array
        items:
          type: integer
        example: [1, 4, 17]
      notes_count:
        type: integer
        example: 3

paths:

  /logout:
    delete:
      operationId: logout
      description: logs a user out of their account on the service
      summary: logout
      tags:
        - Auth
      parameters:
        - name: Authorization
          type: string
          in: header
          required: true
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              message:
                type: string
                example: "successfully logged out"
        401:
          description: Unauthorized
        422:
          description: Unprocessable Entity
        
            

  /login:
    post:
      operationId: login
      description: this takes an email and password, creates a new user if that email doesn't exist in the database or verifies it against the existing email and returns a server generated access token from JWTs to the user
      summary: login
      tags:
        - Auth
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
                example: "mitchell_shelton@y7mail.com"
              password:
                type: string
                example: "secret"
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              accessToken:
                type: string
                example: "fuehfoeifjw"
              user_id:
                type: integer
                example: 1
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
          
          

  /notes:
  
    get:
      operationId: get_notes
      description: this is used for getting notes for a youtube video
      summary: notes
      tags:
        - Notes
      parameters:
        - name: Authorization
          type: string
          in: header
          required: true
        - name: sort
          type: string
          in: query
          enum: [+note_id, +note, +user_id, +video_id, +timestamp, -note_id, -note, -user_id, -video_id, -timestamp]
          default: "+timestamp"
        - name: note_id
          type: integer
          in: query
        - name: video_id
          type: string
          in: query
        - name: user_id
          type: integer
          in: query
        - name: timestamp
          type: number
          in: query
        - name: note
          type: string
          in: query
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              notes:
                type: array
                items:
                  $ref: '#/definitions/note'
              num_notes:
                type: integer
                example: 1
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        401:
          description: Unauthorized
        422:
          description: Unprocessable Entity
  
    post:
      operationId: post_notes
      description: this is used for creating notes on a youtube video
      summary: create notes
      tags:
        - Notes
      parameters:
        - name: Authorization
          type: string
          in: header
          required: true
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              note:
                type: string
                example: "this is my note"
              user_id:
                type: integer
                example: 1
              video_id:
                type: string
                example: "gSdG3FsMBq4"
              timestamp:
                type: number
                example: 2.5
      responses:
        201:
          description: Created
          schema:
            $ref: '#/definitions/note'
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        401:
          description: Unauthorized
        409:
          description: Conflict (Already Created)
          schema:
            $ref: '#/definitions/error'
        422:
          description: Unprocessable Entity
        
           
           
  /notes/{note_id}:
  
    get:
      operationId: get_note
      description: this is used for getting a specific note on a youtube video
      summary: get note
      tags:
        - Notes
      parameters:
        - name: Authorization
          type: string
          in: header
          required: true
        - name: note_id
          in: path
          required: true
          type: integer
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/note'
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        401:
          description: Unauthorized
        404:
          description: Not Found
          schema:
            $ref: '#/definitions/error'
        422:
          description: Unprocessable Entity
  
    put:
      operationId: put_notes
      description: this is used for editing notes on a youtube video
      summary: edit notes
      tags:
        - Notes
      parameters:
        - name: Authorization
          type: string
          in: header
          required: true
        - name: note_id
          in: path
          required: true
          type: integer
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/note'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/note'
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        401:
          description: Unauthorized
        404:
          description: Not Found
          schema:
            $ref: '#/definitions/error'
        409:
          description: Conflict
          schema:
            $ref: '#/definitions/error'
        422:
          description: Unprocessable Entity
            
    delete:
      operationId: delete_notes
      description: this is used for deleting notes on a youtube video
      summary: delete notes
      tags:
        - Notes
      parameters:
        - name: Authorization
          type: string
          in: header
          required: true
        - name: note_id
          in: path
          required: true
          type: integer
      responses:
        200:
          description: OK
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        401:
          description: Unauthorized
        404:
          description: Not Found
          schema:
            $ref: '#/definitions/error'
        422:
          description: Unprocessable Entity
            
            
                
  /videos:
  
    get:
      operationId: get_videos
      description: this is used for getting the videos that a user has notes on
      summary: videos
      tags:
        - Videos
      parameters:
        - name: Authorization
          type: string
          in: header
          required: true
        - name: sort
          type: string
          in: query
          enum: [+video_id, +user_id, -video_id, -user_id, +video_title, -video_title, +categories, -categories, +notes_count, -notes_count]
          default: "+video_id"
        - name: video_id
          type: string
          in: query
        - name: user_id
          type: integer
          in: query
        - name: video_title
          type: string
          in: query
        - name: categories
          type: string
          in: query #comedy,education
        - name: notes_count
          type: integer
          in: query
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              videos:
                type: array
                items:
                  $ref: '#/definitions/video'
              num_videos:
                type: integer
                example: 1
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        401:
          description: Unauthorized
        422:
          description: Unprocessable Entity
          
  /videos/{video_id}/tag:
   
    post:
      operationId: set tag for a video
      description: this is used for setting a tag for a video
      summary: set tag for a video
      tags:
        - Videos
      parameters:
        - name: Authorization
          type: string
          in: header
          required: true
        - name: video_id
          type: string
          in: path
          required: true
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              user_id:
                type: integer
                example: 2
              tag:
                type: string
                example: "comedy"
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              videos:
                  $ref: '#/definitions/video'
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
      
          
  /tags:
 
    post:
      operationId: create_tag
      description: this is used for creating a tag
      summary: create tag
      tags:
        - Tag
      parameters:
        - name: Authorization
          type: string
          in: header
          required: true
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/tag'
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              tag:
                  $ref: '#/definitions/tag'
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
 
    get:
      operationId: get_tags
      description: this is used for getting all tags
      summary: get tags
      tags:
        - Tag
      parameters:
        - name: Authorization
          type: string
          in: header
          required: true
        - name: user_id
          type: integer
          in: query
        - name: tag
          type: string
          in: query
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              tags:
                type: array
                items:
                  $ref: '#/definitions/tag'
              num_tags:
                type: integer
                example: 1
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
                

  